View(trimdata_hot)
# Cut out all NA values
trimdata_clean <- drop_na(trimdata_hot)
View(trimdata_clean)
# Count NAs per column
na_counts <- tridata_hot %>%
summarise_all(~ sum(is.na(.))) %>%
pivot_longer(cols = everything(), names_to = "column", values_to = "na.count")
# Count NAs per column
na_counts <- trimdata_hot %>%
summarise_all(~ sum(is.na(.))) %>%
pivot_longer(cols = everything(), names_to = "column", values_to = "na.count")
View(na_counts)
# Count NAs per column
na_counts <- trimdata_hot %>%
summarise_all(~ sum(is.na(.)))
View(na_counts)
# Count NAs per column
na_counts <- trimdata_hot %>%
summarise_all(~ sum(is.na(.))) %>%
pivot_longer()
# Count NAs per column
na_counts <- trimdata_hot %>%
summarise_all(~ sum(is.na(.))) %>%
pivot_longer(cols = everything())
View(na_counts)
# Trim out free-text data, fix "spend" typo ("spend" is not a noun, stop trying to make it one)
trimdata <- coffee_survey %>%
select(-matches("other|specify|coffee_a|coffee_b|coffee_c|coffee_d|prefer")) %>%
rename(monthly_expenditure = total_spend) %>%
mutate_all(~ if(is.character(.)) tolower(.) else .) %>%
mutate(across(c(age, cups, favorite, style, strength, roast_level, caffeine, expertise,
wfh, monthly_expenditure, taste, know_source, most_paid, most_willing,
value_cafe, spent_equipment, value_equipment, gender, education_level,
ethnicity_race, employment_status, number_children, political_affiliation
), as.factor)
)
# List of columns with multi-value cells
hot_columns <- c("where_drink",
"brew",
"purchase",
"additions",
"dairy",
"sweetener",
"why_drink"
)
# One-hot encode multivalue columns
trimdata_hot <- trimdata
for (column in hot_columns) {
trimdata_hot <- one_hot_encode(trimdata_hot, column)
}
# Cut out all NA values
trimdata_clean <- drop_na(trimdata_hot)
rm(na_counts)
rm(trimdata_clean)
View(trimdata)
View(trimdata_hot)
str(trimdata_hot)
trimdata_clean <- drop_na(trimdata_hot)
View(trimdata_clean)
trimdata_factors <- trimdata %>%
select(-all_of(hot_columns))
View(trimdata_hot)
View(trimdata_factors)
View(trimdata_clean)
View(trimdata_factors)
trimdata_factors_clean <- trimdata %>%
select(-all_of(hot_columns)) %>%
drop_na()
View(trimdata_factors_clean)
View(trimdata_factors_clean)
str(trimdata_factors_clean)
library(vcd)
install.packages("vcd")
library(vcd)
cramers_v <- function(x, y) {
chi2 <- chisq.test(x, y)
n <- sum(chi2$observed)
phi2 <- chi2$statistic / n
r <- length(unique(x))
k <- length(unique(y))
return(sqrt(phi2 / min(r - 1, k - 1)))
}
cramers_v <- function(x, y) {
chi2 <- chisq.test(x, y)
n <- sum(chi2$observed)
phi2 <- chi2$statistic / n
r <- length(unique(x))
k <- length(unique(y))
return(sqrt(phi2 / min(r - 1, k - 1)))
}
factor_columns <- select(trimdata_factors_clean, -subject_id)
factor_columns <- select(trimdata_factors_clean, -submission_id)
combinations <- combn(names(factor_columns), 2, simplify = FALSE)
results <- map_dfr(combinations, function(cols) {
cramer_v <- cramers_v(data[[cols[1]]], data[[cols[2]]])
tibble(
var1 = cols[1],
var2 = cols[2],
cramers_v = cramer_v
)
})
# Function to calculate Cramér's V
cramers_v <- function(x, y) {
chi2 <- chisq.test(x, y)
n <- sum(chi2$observed)
phi2 <- chi2$statistic / n
r <- length(unique(x))
k <- length(unique(y))
return(sqrt(phi2 / min(r - 1, k - 1)))
}
# Assuming trimdata_factors_clean is your cleaned data
factor_columns <- select(trimdata_factors_clean, -submission_id)
# Generate all combinations of pairs of factor columns
combinations <- combn(names(factor_columns), 2, simplify = FALSE)
# Calculate Cramér's V for each pair
results <- map_dfr(combinations, function(cols) {
cramer_v <- cramers_v(factor_columns[[cols[1]]], factor_columns[[cols[2]]])
tibble(
var1 = cols[1],
var2 = cols[2],
cramers_v = cramer_v
)
})
# Rank the pairs by Cramér's V
results <- results %>% arrange(desc(cramers_v))
View(results)
warnings()
library(stringr)
results_politics <- results %>%
rowwise() %>%
filter(if_any(everything(), ~ str_detect(., "political")))
View(results_politics)
View(combinations)
exp_source <- trimdata_factors_clean %>%
select(expertise, source)
exp_source <- trimdata_factors_clean %>%
select(expertise, know_source)
View(exp_source)
ggplot(exp_source, aes(x = know_source, y = experience, color = know_source)) +
geom_boxplot(outlier.shape = NA, alpha = 0.6) +
geom_jitter(width = 0.2, alpha = 0.6) +
labs(
title = "Distribution of Experience by Knowledge of Source",
x = "Know Source",
y = "Experience Level"
) +
theme+minimal() +
theme(legend.position = "none")
ggplot(exp_source, aes(x = know_source, y = experience, color = know_source)) +
geom_boxplot(outlier.shape = NA, alpha = 0.6) +
geom_jitter(width = 0.2, alpha = 0.6) +
labs(
title = "Distribution of Experience by Knowledge of Source",
x = "Know Source",
y = "Experience Level"
) +
theme_minimal() +
theme(legend.position = "none")
ggplot(exp_source, aes(x = know_source, y = expertise, color = know_source)) +
geom_boxplot(outlier.shape = NA, alpha = 0.6) +
geom_jitter(width = 0.2, alpha = 0.6) +
labs(
title = "Distribution of Expertise by Knowledge of Source",
x = "Know Source",
y = "Expertise Level"
) +
theme_minimal() +
theme(legend.position = "none")
ggplot(exp_source, aes(x = know_source, y = expertise, color = know_source)) +
geom_jitter(width = 0.2, alpha = 0.6) +
labs(
title = "Distribution of Expertise by Knowledge of Source",
x = "Know Source",
y = "Expertise Level"
) +
theme_minimal() +
theme(legend.position = "none")
ggplot(exp_source, aes(x = know_source, y = expertise, color = know_source)) +
geom_boxplot(outlier.shape = NA, alpha = 0.6) +
labs(
title = "Distribution of Expertise by Knowledge of Source",
x = "Know Source",
y = "Expertise Level"
) +
theme_minimal() +
theme(legend.position = "none")
str(trimdata_factors_clean)
ggplot(exp_source, aes(x = know_source, y = expertise, color = know_source)) +
geom_boxplot(outlier.shape = NA, alpha = 0.6) +
geom_jitter(width = 0.2, alpha = 0.6) +
scale_y_continuous(breaks = 1:10) +
labs(
title = "Distribution of Expertise by Knowledge of Source",
x = "Know Source",
y = "Expertise Level"
) +
theme_minimal() +
theme(legend.position = "none")
ggplot(exp_source, aes(x = know_source, y = expertise, color = know_source)) +
geom_boxplot(outlier.shape = NA, alpha = 0.6) +
geom_jitter(width = 0.2, alpha = 0.6) +
labs(
title = "Distribution of Expertise by Knowledge of Source",
x = "Know Source",
y = "Expertise Level"
) +
theme_minimal() +
theme(legend.position = "none")
print(trimdata_factors_clean)
print(exp_source)
ggplot(exp_source, aes(x = know_source, y = as.numeric(as.character(expertise)), color = know_source)) +
geom_boxplot(alpha = 0.6)
ggplot(exp_source, aes(x = know_source, y = as.numeric(as.character(expertise)), color = know_source)) +
geom_boxplot(outlier.shape = NA, alpha = 0.6) +
geom_jitter(width = 0.2, alpha = 0.6) +
labs(
title = "Distribution of Expertise by Knowledge of Source",
x = "Know Source",
y = "Expertise Level"
) +
theme_minimal() +
theme(legend.position = "none")
ggplot(exp_source, aes(x = know_source, y = as.numeric(expertise), color = know_source)) +
geom_boxplot(outlier.shape = NA, alpha = 0.6) +
geom_jitter(width = 0.2, alpha = 0.6) +
labs(
title = "Distribution of Expertise by Knowledge of Source",
x = "Know Source",
y = "Expertise Level"
) +
theme_minimal() +
theme(legend.position = "none")
ggplot(exp_source, aes(x = know_source, y = as.numeric(expertise), color = know_source)) +
geom_boxplot(outlier.shape = NA, alpha = 0.6) +
geom_jitter(width = 0.2, alpha = 0.6) +
labs(
title = "Distribution of Expertise by Knowledge of Source",
x = "Know Source",
y = "Expertise Level"
) +
theme_minimal() +
theme(legend.position = "none")
ggplot(exp_source, aes(x = know_source, y = as.numeric(expertise), color = know_source)) +
geom_boxplot(outlier.shape = NA, alpha = 0.6) +
geom_jitter(width = 0.2, alpha = 0.6) +
labs(
title = "Distribution of Expertise by Knowledge of Source",
x = "Know Source",
y = "Expertise Level"
) +
theme_minimal() +
theme(legend.position = "none")
ggplot(exp_source, aes(x = know_source, y = as.numeric(expertise), color = know_source)) +
geom_boxplot(outlier.shape = NA, alpha = 0.6) +
geom_jitter(width = 0.2, alpha = 0.6) +
labs(
title = "Distribution of Expertise by Knowledge of Source",
x = "Know Source",
y = "Expertise Level"
) +
theme_minimal() +
theme(legend.position = "none")
ggplot(exp_source, aes(x = know_source, y = as.numeric(expertise), color = know_source)) +
geom_boxplot(outlier.shape = NA, alpha = 0.6) +
geom_jitter(width = 0.2, alpha = 0.6) +
labs(
title = "Distribution of Expertise by Knowledge of Source",
x = "Know Source",
y = "Expertise Level"
) +
theme_minimal() +
theme(legend.position = "none")
ggplot(exp_source, aes(x = know_source, y = as.numeric(expertise), color = know_source)) +
geom_boxplot(outlier.shape = NA, alpha = 0.6) +
geom_jitter(width = 0.2, alpha = 0.6) +
labs(
title = "Distribution of Expertise by Knowledge of Source",
x = "Know Source",
y = "Expertise Level"
) +
theme_minimal() +
theme(legend.position = "none")
ggplot(exp_source, aes(x = know_source, y = as.numeric(expertise), color = know_source)) +
geom_boxplot(outlier.shape = NA, alpha = 0.6) +
geom_jitter(width = 0.2, alpha = 0.2) +
labs(
title = "Distribution of Expertise by Knowledge of Source",
x = "Know Source",
y = "Expertise Level"
) +
theme_minimal() +
theme(legend.position = "none")
ggplot(exp_source, aes(x = know_source, y = as.numeric(expertise), color = know_source)) +
geom_boxplot(outlier.shape = NA, alpha = 0.6) +
geom_jitter(width = 0.3, alpha = 0.2) +
labs(
title = "Distribution of Expertise by Knowledge of Source",
x = "Know Source",
y = "Expertise Level"
) +
theme_minimal() +
theme(legend.position = "none")
ggplot(exp_source, aes(x = know_source, y = as.numeric(expertise), color = know_source)) +
geom_boxplot(outlier.shape = NA, alpha = 0.6) +
geom_jitter(width = 0.3, height = 0.3, alpha = 0.2) +
labs(
title = "Distribution of Expertise by Knowledge of Source",
x = "Know Source",
y = "Expertise Level"
) +
theme_minimal() +
theme(legend.position = "none")
ggplot(exp_source, aes(x = know_source, y = as.numeric(expertise), color = know_source)) +
geom_boxplot(outlier.shape = NA, alpha = 0.6) +
geom_jitter(width = 0.3, height = 0.1, alpha = 0.2) +
labs(
title = "Distribution of Expertise by Knowledge of Source",
x = "Know Source",
y = "Expertise Level"
) +
theme_minimal() +
theme(legend.position = "none")
ggplot(exp_source, aes(x = know_source, y = as.numeric(expertise), color = know_source)) +
geom_boxplot(outlier.shape = NA, alpha = 0.6) +
geom_jitter(width = 0.3, height = 0.5, alpha = 0.2) +
labs(
title = "Distribution of Expertise by Knowledge of Source",
x = "Know Source",
y = "Expertise Level"
) +
theme_minimal() +
theme(legend.position = "none")
ggplot(exp_source, aes(x = know_source, y = as.numeric(expertise), color = know_source)) +
geom_boxplot(outlier.shape = NA, alpha = 0.6) +
geom_jitter(width = 0.3, height = 0.4, alpha = 0.2) +
labs(
title = "Distribution of Expertise by Knowledge of Source",
x = "Know Source",
y = "Expertise Level"
) +
theme_minimal() +
theme(legend.position = "none")
ggplot(exp_source, aes(x = know_source, y = as.numeric(expertise), color = know_source)) +
geom_boxplot(outlier.shape = NA, alpha = 0.6) +
geom_jitter(width = 0.3, height = 0.45, alpha = 0.2) +
labs(
title = "Distribution of Expertise by Knowledge of Source",
x = "Know Source",
y = "Expertise Level"
) +
theme_minimal() +
theme(legend.position = "none")
ggplot(exp_source, aes(x = know_source, y = as.numeric(expertise), color = know_source)) +
geom_boxplot(outlier.shape = NA, alpha = 0.6) +
geom_jitter(width = 0.3, height = 0.5, alpha = 0.2) +
labs(
title = "Distribution of Expertise by Knowledge of Source",
x = "Know Source",
y = "Expertise Level"
) +
theme_minimal() +
theme(legend.position = "none")
ggplot(exp_source, aes(x = know_source, y = as.numeric(expertise), color = know_source)) +
geom_boxplot(outlier.shape = NA, alpha = 0.6) +
geom_jitter(width = 0.3, height = 0.5, alpha = 0.2) +
labs(
title = "Distribution of Knowledge of Source by Self-Reported Expertise",
x = "Know Source",
y = "Expertise Level Claimed"
) +
theme_minimal() +
theme(legend.position = "none")
ggplot(exp_source, aes(x = know_source, y = as.numeric(expertise), color = know_source)) +
geom_boxplot(outlier.shape = NA, alpha = 0.6) +
geom_jitter(width = 0.3, height = 0.5, alpha = 0.2) +
scale_y_continuous(breaks = seq(0, 10, by = 1)) +
labs(
title = "Distribution of Knowledge of Source by Self-Reported Expertise",
x = "Know Source",
y = "Expertise Level Claimed"
) +
theme_minimal() +
theme(legend.position = "none")
ggplot(exp_source, aes(x = know_source, y = as.numeric(expertise), color = know_source)) +
geom_boxplot(outlier.shape = NA, alpha = 0.6) +
geom_jitter(width = 0.1, height = 0.5, alpha = 0.2) +
scale_y_continuous(breaks = seq(0, 10, by = 1)) +
labs(
title = "Distribution of Knowledge of Source by Self-Reported Expertise",
x = "Know Source",
y = "Expertise Level Claimed"
) +
theme_minimal() +
theme(legend.position = "none")
ggplot(exp_source, aes(x = know_source, y = as.numeric(expertise), color = know_source)) +
geom_boxplot(outlier.shape = NA, alpha = 0.6) +
geom_jitter(width = 0.2, height = 0.5, alpha = 0.2) +
scale_y_continuous(breaks = seq(0, 10, by = 1)) +
labs(
title = "Distribution of Knowledge of Source by Self-Reported Expertise",
x = "Know Source",
y = "Expertise Level Claimed"
) +
theme_minimal() +
theme(legend.position = "none")
ggplot(exp_source, aes(x = know_source, y = as.numeric(expertise), color = know_source)) +
geom_boxplot(outlier.shape = NA, alpha = 0.6) +
geom_jitter(width = 0.25, height = 0.5, alpha = 0.2) +
scale_y_continuous(breaks = seq(0, 10, by = 1)) +
labs(
title = "Distribution of Knowledge of Source by Self-Reported Expertise",
x = "Know Source",
y = "Expertise Level Claimed"
) +
theme_minimal() +
theme(legend.position = "none")
ggplot(exp_source, aes(x = know_source, y = as.numeric(expertise), color = know_source)) +
geom_boxplot(outlier.shape = NA, alpha = 0.6) +
geom_jitter(width = 0.25, height = 0.5, alpha = 0.2) +
scale_y_continuous(breaks = seq(0, 10, by = 1)) +
labs(
title = "Distribution of Knowledge of Source by Self-Reported Expertise",
x = "Know Source",
y = "Expertise Level Claimed"
) +
theme_minimal() +
theme(legend.position = "none")
exp_source_outliers <- trimdata_factors_clean %>%
filter(str_detect(expertise, 10) & str_detect(know_source, "no"))
exp_source_outliers <- trimdata_factors_clean %>%
filter(str_detect(expertise, "10") & str_detect(know_source, "no"))
View(exp_source_outliers)
ggplot(exp_source, aes(x = know_source, y = as.numeric(expertise), color = know_source)) +
geom_boxplot(outlier.shape = NA, alpha = 0.6) +
geom_jitter(width = 0.25, height = 0.5, alpha = 0.2) +
scale_y_continuous(breaks = seq(0, 10, by = 1)) +
labs(
title = "Distribution of Knowledge of Source by Self-Reported Expertise",
x = "Do You Know Where Your Coffee Comes From?",
y = "Claimed Level of Coffee Expertise"
) +
theme_minimal() +
theme(legend.position = "none")
exp_source_outliers <- trimdata_factors_clean %>%
mutate(expertise = as.integer(expertise)) %>%
filter(expertise, > 8)
exp_source_outliers <- trimdata_factors_clean %>%
mutate(expertise = as.integer(expertise)) %>%
filter(expertise > 8)
View(exp_source_outliers)
value_politics <- trimdata_factors_clean %>%
filter(str_detect(political_affiliation, "republican")) %>%
select(political_affiliation, value_cafe)
View(value_politics)
value_politics <- trimdata_factors_clean %>%
filter(str_detect(political_affiliation, "republican")) %>%
select(political_affiliation, value_cafe) %>%
group_by(value_cafe) %>%
summarize(count = n())
View(value_politics)
value_politics <- trimdata_factors_clean %>%
filter(str_detect(political_affiliation, "republican")) %>%
select(political_affiliation, value_cafe) %>%
summarize()
View(value_politics)
View(value_politics)
value_politics <- trimdata_factors_clean %>%
filter(str_detect(political_affiliation, "republican")) %>%
select(political_affiliation, value_cafe) %>%
summarize(count = n())
View(value_politics)
value_politics <- trimdata_factors_clean %>%
filter(str_detect(political_affiliation, "republican")) %>%
select(political_affiliation, value_cafe) %>%
summarize(count = n(), .group = value_cafe)
View(value_politics)
value_politics <- trimdata_factors_clean %>%
filter(str_detect(political_affiliation, "republican")) %>%
select(political_affiliation, value_cafe) %>%
group_by(value_cafe) %>%
summarize(count = n())
View(value_politics)
value_politics <- trimdata_factors_clean %>%
filter(str_detect(political_affiliation, "republican")) %>%
select(political_affiliation, value_cafe) %>%
group_by(value_cafe, political_affiliation) %>%
summarize(count = n())
View(value_politics)
exp_source_outliers <- trimdata_factors_clean %>%
mutate(expertise = as.integer(expertise)) %>%
filter(expertise > 9)
View(exp_source_outliers)
exp_source_outliers <- trimdata_factors_clean %>%
mutate(expertise = as.integer(expertise)) %>%
filter(expertise > 8) %>%
filter(str_detect(know_source, "no"))
View(exp_source_outliers)
exp_source_outliers <- trimdata_factors_clean %>%
mutate(expertise = as.integer(expertise)) %>%
filter(expertise > 7) %>%
filter(str_detect(know_source, "no"))
View(exp_source_outliers)
know_politics <- trimdata_factors_clean %>%
filter(str_detect(political_affiliation, "republican")) %>%
select(know_source)
View(know_politics)
know_politics <- trimdata_factors_clean %>%
filter(str_detect(political_affiliation, "republican")) %>%
group_by(know_source) %>%
summarize(count = n())
View(know_politics)
